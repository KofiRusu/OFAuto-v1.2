name: OFAuto Release Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allow manual triggering

jobs:
  test-and-deploy:
    name: Test & Deploy to Vercel
    runs-on: ubuntu-latest

    # Define environment variables needed for build and tests
    # These should be configured as secrets in your GitHub repository settings
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }} # Add if used
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }} # If Google Drive is used
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }} # If Google Drive is used
      # Add other platform secrets as needed (e.g., Patreon, Fansly keys)
      # PATREON_CLIENT_ID: ${{ secrets.PATREON_CLIENT_ID }}
      # PATREON_CLIENT_SECRET: ${{ secrets.PATREON_CLIENT_SECRET }}
      DEMO_MODE: "false" # Typically false for production builds
      NODE_ENV: production # Ensure production build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Use latest version

      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18 # Specify Node.js version
          cache: "pnpm" # Enable caching for pnpm

      - name: Install pnpm
        run: npm install -g pnpm # Install pnpm globally if not cached

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile # Use frozen lockfile for CI consistency

      # Optional: Database setup for testing (if QA script requires live DB)
      # - name: Start PostgreSQL service
      #   uses: harmon758/postgresql-action@v1
      #   with:
      #     postgresql db: ofauto_test
      #     postgresql user: testuser
      #     postgresql password: testpassword
      
      # - name: Apply Prisma Migrations (for testing)
      #   run: pnpm prisma migrate deploy
      #   env:
      #     DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/ofauto_test
      
      # Optional: Seed DB for testing (if QA script requires data)
      # - name: Seed DB (for testing)
      #   run: pnpm run seed:demo # Use demo seed for testing environment
      #   env:
      #     DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/ofauto_test

      - name: Lint Code
        run: pnpm run lint
      
      - name: Build Project
        run: pnpm run build # Uses vercel-build script internally if defined
        
      # Run QA Checks (ensure it doesn't require interactive input or external services not available in CI)
      - name: Run QA Checks 
        run: pnpm run qa
        continue-on-error: false # Fail the job if QA checks fail

      # Deployment step using Vercel CLI (official action)
      - name: Deploy to Vercel Production
        if: success() # Only deploy if previous steps succeeded
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          # Pass required build-time env vars to Vercel if needed
          # NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          # ... other public keys

  # Optional: Docker build job (example)
  # docker-build:
  #   name: Build Docker Image
  #   needs: test-and-deploy # Run after test-and-deploy
  #   if: always() # Run whether test-and-deploy succeeded or failed, adjust as needed
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Example: Login to Docker Hub (replace with your registry)
  #     # - name: Login to Docker Hub
  #     #   uses: docker/login-action@v3
  #     #   with:
  #     #     username: ${{ secrets.DOCKERHUB_USERNAME }}
  #     #     password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: false # Set to true to push to registry
  #         tags: your-dockerhub-username/ofauto-app:latest # Replace with your image tag
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max 