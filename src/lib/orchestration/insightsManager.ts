import { v4 as uuidv4 } from 'uuid';

// Re-export the type from useInsights to avoid circular dependency
export interface InsightWithAction {
  id: string;
  title: string;
  description: string;
  severity: 'high' | 'medium' | 'low' | 'positive';
  timestamp: string;
  metrics?: Record<string, string>;
  recommendedAction?: {
    type: string;
    description: string;
  };
  actionApplied?: boolean;
  actionTimestamp?: string;
  actionType?: string;
  dismissed?: boolean;
  campaignId?: string;
  type?: string;
}

// Mock data for insights
const mockInsights: InsightWithAction[] = [
  {
    id: '1',
    title: 'High CPA in Campaign A',
    description: 'Your cost per acquisition is 25% higher than last month.',
    severity: 'high',
    timestamp: new Date().toISOString(),
    metrics: {
      cpa: '$45.20',
      spend: '$2,450',
      conversions: '54'
    },
    recommendedAction: {
      type: 'optimizeBudget',
      description: 'Reduce campaign budget by 15% and reallocate to better performing campaigns.'
    }
  },
  {
    id: '2',
    title: 'New Audience Opportunity',
    description: 'Analysis shows potential for engagement with demographic 25-34 in new regions.',
    severity: 'medium',
    timestamp: new Date().toISOString(),
    metrics: {
      reachPotential: '125K',
      estimatedCTR: '2.1%',
      avgEngagement: '4.5%'
    },
    recommendedAction: {
      type: 'expandAudience',
      description: 'Create a new targeting segment focused on this demographic in high-performing regions.'
    }
  },
  {
    id: '3',
    title: 'Subscription Revenue Growth',
    description: 'Your subscription revenue has increased by 32% compared to last quarter.',
    severity: 'positive',
    timestamp: new Date().toISOString(),
    metrics: {
      quarterlyGrowth: '+32%',
      retentionRate: '87%',
      newSubscribers: '143'
    },
    recommendedAction: {
      type: 'enhanceRetention',
      description: 'Consider implementing a loyalty program to further increase retention rates.'
    }
  }
];

/**
 * Mock implementation of the InsightsManager
 */
export class InsightsManager {
  private insights: InsightWithAction[] = [...mockInsights];

  constructor() {
    // Initialize with mock data
  }

  /**
   * Get all insights, optionally filtered by client ID
   */
  getInsights(clientId?: string): InsightWithAction[] {
    // In a real implementation, this would filter by client ID
    return this.insights;
  }

  /**
   * Get a specific insight by ID
   */
  getInsightById(insightId: string): InsightWithAction | null {
    return this.insights.find(insight => insight.id === insightId) || null;
  }

  /**
   * Apply an action to an insight
   */
  async applyInsightAction(insightId: string, actionType: string): Promise<boolean> {
    const insight = this.getInsightById(insightId);
    
    if (insight) {
      insight.actionApplied = true;
      insight.actionTimestamp = new Date().toISOString();
      insight.actionType = actionType;
      return true;
    }
    
    return false;
  }

  /**
   * Dismiss an insight
   */
  dismissInsight(insightId: string): boolean {
    const insight = this.getInsightById(insightId);
    
    if (insight) {
      insight.dismissed = true;
      return true;
    }
    
    return false;
  }

  /**
   * Generate new insights
   * This is a mock implementation that would normally call an API or analysis service
   */
  async generateInsights(): Promise<boolean> {
    // In a real implementation, this would generate new insights based on data analysis
    // For the mock, we'll just add a new random insight
    
    const newInsight: InsightWithAction = {
      id: uuidv4(),
      title: `Insight ${this.insights.length + 1}`,
      description: 'New insight generated by the AI analysis engine.',
      severity: ['high', 'medium', 'low', 'positive'][Math.floor(Math.random() * 4)] as 'high' | 'medium' | 'low' | 'positive',
      timestamp: new Date().toISOString(),
      metrics: {
        metricA: `${Math.floor(Math.random() * 100)}%`,
        metricB: `$${Math.floor(Math.random() * 1000)}`
      },
      recommendedAction: {
        type: 'customAction',
        description: 'Take action based on the new insight.'
      }
    };
    
    this.insights.push(newInsight);
    return true;
  }
} 