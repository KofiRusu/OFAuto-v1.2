\'use client\';\n\nimport React, { useState, useEffect } from \'react\';\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Eye, EyeOff } from \'lucide-react\';\n\ninterface KoFiIntegrationSettingsProps {\n  platformId: string; // Assume platformId is passed to identify the account\n  initialApiKey?: string; // Optional: Pre-fill if key exists (should be handled securely)\n  initialStatus?: \'connected\' | \'disconnected\' | \'pending\';\n  lastSyncTime?: string;\n}\n\nexport function KoFiIntegrationSettings({ \n  platformId,\n  initialApiKey = \'\', // Avoid pre-filling sensitive data directly\n  initialStatus = \'disconnected\',\n  lastSyncTime\n}: KoFiIntegrationSettingsProps) {\n  const [apiKey, setApiKey] = useState(\'\'); // Start empty for security\n  const [isLoading, setIsLoading] = useState(false);\n  const [status, setStatus] = useState<\'connected\' | \'disconnected\' | \'pending\'>(initialStatus);\n  const [showApiKey, setShowApiKey] = useState(false);\n  const { toast } = useToast();\n\n  // In a real app, fetch initial status/sync time if needed\n  useEffect(() => {\n      // TODO: Fetch connection status for platformId if needed\n      // e.g., check if a valid API key exists via an API call\n  }, [platformId]);\n\n  const handleTestConnection = async () => {\n    if (!apiKey) {\n      toast({ title: \"API Key Required\", description: \"Please enter your Ko-fi API key.\", variant: \"destructive\" });\n      return;\n    }\n    \n    setIsLoading(true);\n    setStatus(\'pending\');\n    try {\n      const response = await fetch(\'/api/integrations/kofi/test\', {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify({ apiKey, platformId }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        setStatus(\'connected\');\n        toast({ title: \"Connection Successful\", description: \"Ko-fi API key validated and saved.\", variant: \"default\" });\n      } else {\n        setStatus(\'disconnected\');\n        toast({ title: \"Connection Failed\", description: result.error || \'Invalid API Key\', variant: \"destructive\" });\n      }\n    } catch (error) {\n      setStatus(\'disconnected\');\n      toast({ title: \"Error\", description: \"An unexpected error occurred.\", variant: \"destructive\" });\n      console.error(\'Ko-fi connection test error:\', error);\n    }\ finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusBadge = () => {\n    switch (status) {\n      case \'connected\':\n        return <Badge variant=\"success\">Connected</Badge>;\n      case \'pending\':\n        return <Badge variant=\"outline\">Testing...</Badge>;\n      case \'disconnected\':\n      default:\n        return <Badge variant=\"destructive\">Disconnected</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4 p-4 border rounded-lg\">\n      <h3 className=\"text-lg font-semibold\">Ko-fi Integration</h3>\n      <div className=\"flex items-center space-x-2\">\n          <Label>Status:</Label>\n          {getStatusBadge()}\n          {status === \'connected\' && lastSyncTime && (\n              <span className=\"text-sm text-muted-foreground\">Last synced: {lastSyncTime}</span>\n          )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"kofi-api-key\">API Key</Label>\n        <div className=\"flex items-center space-x-2\">\n          <Input\n            id=\"kofi-api-key\"\n            type={showApiKey ? \'text\' : \'password\'}\n            value={apiKey}\n            onChange={(e) => setApiKey(e.target.value)}\n            placeholder=\"Enter your Ko-fi API Key\"\n            disabled={isLoading}\n            className=\"flex-grow\"\n          />\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setShowApiKey(!showApiKey)} aria-label={showApiKey ? \'Hide API Key\' : \'Show API Key\'}>\n            {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n         <p className=\"text-sm text-muted-foreground\">\n            Find your API Key in your Ko-fi account settings under \'API\'.\n          </p>\n      </div>\n      \n      <Button onClick={handleTestConnection} disabled={isLoading || !apiKey}>\n        {isLoading ? \'Testing...\' : \'Test & Save Connection\'}\n      </Button>\n    </div>\n  );\n} 