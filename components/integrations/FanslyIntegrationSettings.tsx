\'use client\';\n\nimport React, { useState, useEffect } from \'react\';\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Eye, EyeOff } from \'lucide-react\';\n\ninterface FanslyIntegrationSettingsProps {\n  platformId: string;\n  // We generally avoid passing sensitive tokens directly as props\n  initialStatus?: \'connected\' | \'disconnected\' | \'pending\';\n  lastSyncTime?: string;\n}\n\nexport function FanslyIntegrationSettings({\n  platformId,\n  initialStatus = \'disconnected\',\n  lastSyncTime\n}: FanslyIntegrationSettingsProps) {\n  const [sessionToken, setSessionToken] = useState(\'\');\n  const [isLoading, setIsLoading] = useState(false);\n  const [status, setStatus] = useState<\'connected\' | \'disconnected\' | \'pending\'>(initialStatus);\n  const [showToken, setShowToken] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch initial status on component mount\n  useEffect(() => {\n    const fetchStatus = async () => {\n      setIsLoading(true);\n      try {\n        // Replace with your actual API endpoint to check status\n        const response = await fetch(`/api/integrations/fansly/status?platformId=${platformId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setStatus(data.status || \'disconnected\');\n          // Potentially update lastSyncTime here too\n        } else {\n          setStatus(\'disconnected\');\n        }\n      } catch (error) {\n        setStatus(\'disconnected\');\n        console.error(\'Error fetching Fansly status:\', error);\n      }\n      setIsLoading(false);\n    };\n    // fetchStatus(); // Uncomment when status endpoint is ready\n  }, [platformId]);\n\n  const handleTestConnection = async () => {\n    if (!sessionToken) {\n      toast({ title: \"Session Token Required\", description: \"Please enter your Fansly session token.\", variant: \"destructive\" });\n      return;\n    }\n    \n    setIsLoading(true);\n    setStatus(\'pending\');\n    try {\n      const response = await fetch(\'/api/integrations/fansly/test\', {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify({ sessionToken, platformId }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        setStatus(\'connected\');\n        toast({ title: \"Connection Successful\", description: \"Fansly session token validated and saved.\", variant: \"default\" });\n        setSessionToken(\'\'); // Clear input after successful save\n      } else {\n        setStatus(\'disconnected\');\n        toast({ title: \"Connection Failed\", description: result.error || \'Invalid Session Token\', variant: \"destructive\" });\n      }\n    } catch (error) {\n      setStatus(\'disconnected\');\n      toast({ title: \"Error\", description: \"An unexpected error occurred.\", variant: \"destructive\" });\n      console.error(\'Fansly connection test error:\', error);\n    }\n    finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusBadge = () => {\n    // ... (same as KoFiIntegrationSettings) ...\n    switch (status) {\n      case \'connected\':\n        return <Badge variant=\"success\">Connected</Badge>;\n      case \'pending\':\n        return <Badge variant=\"outline\">Testing...</Badge>;\n      case \'disconnected\':\n      default:\n        return <Badge variant=\"destructive\">Disconnected</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4 p-4 border rounded-lg\">\n      <h3 className=\"text-lg font-semibold\">Fansly Integration</h3>\n      <div className=\"flex items-center space-x-2\">\n        <Label>Status:</Label>\n        {getStatusBadge()}\n        {status === \'connected\' && lastSyncTime && (\n            <span className=\"text-sm text-muted-foreground\">Last synced: {lastSyncTime}</span>\n        )}\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"fansly-session-token\">Session Token</Label>\n        <div className=\"flex items-center space-x-2\">\n          <Input\n            id=\"fansly-session-token\"\n            type={showToken ? \'text\' : \'password\'}\n            value={sessionToken}\n            onChange={(e) => setSessionToken(e.target.value)}\n            placeholder=\"Enter your Fansly session token\"\n            disabled={isLoading}\n            className=\"flex-grow\"\n          />\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setShowToken(!showToken)} aria-label={showToken ? \'Hide Token\' : \'Show Token\'}>\n            {showToken ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n         <p className=\"text-sm text-muted-foreground\">\n            Obtain this token from your browser\'s developer tools after logging into Fansly.\n          </p>\n      </div>\n      \n      <Button onClick={handleTestConnection} disabled={isLoading || !sessionToken}>\n        {isLoading ? \'Testing...\' : \'Test & Save Connection\'}\n      </Button>\n    </div>\n  );\n} 