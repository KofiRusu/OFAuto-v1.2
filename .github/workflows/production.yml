name: Production Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      DEMO_MODE: "false"
      NODE_ENV: production
      LAMBDA_FUNCTION_NAME: ofauto-production
      ECR_REPOSITORY: ofauto
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "pnpm"
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint Code
        run: pnpm run lint
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push the Docker image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Store image URI for later steps
          echo "ECR_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Build for Lambda
        run: pnpm run build
      
      - name: Package Lambda function
        run: |
          # Create deployment package
          mkdir -p lambda-package
          cp -r .next lambda-package/
          cp -r public lambda-package/
          cp -r node_modules lambda-package/
          cp package.json lambda-package/
          cp lambda.js lambda-package/
          cp next.config.js lambda-package/
          cd lambda-package && zip -r ../lambda-deployment.zip *
      
      - name: Deploy to AWS Lambda
        run: |
          # Check if Lambda function exists
          if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null; then
            # Update existing function
            aws lambda update-function-code \
              --function-name $LAMBDA_FUNCTION_NAME \
              --zip-file fileb://lambda-deployment.zip
          else
            # Create new function
            aws lambda create-function \
              --function-name $LAMBDA_FUNCTION_NAME \
              --runtime nodejs18.x \
              --handler lambda.handler \
              --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
              --zip-file fileb://lambda-deployment.zip \
              --timeout 30 \
              --memory-size 1024 \
              --environment "Variables={DATABASE_URL=${{ secrets.DATABASE_URL }},NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }},CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }},GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }},DEMO_MODE=false,NODE_ENV=production,ECR_IMAGE_URI=$ECR_IMAGE_URI}"
          fi
          
          # Create or update Lambda URL configuration
          LAMBDA_URL=$(aws lambda create-function-url-config \
            --function-name $LAMBDA_FUNCTION_NAME \
            --auth-type NONE \
            --query 'FunctionUrl' \
            --output text 2>/dev/null || \
            aws lambda get-function-url-config \
            --function-name $LAMBDA_FUNCTION_NAME \
            --query 'FunctionUrl' \
            --output text)
          
          echo "::set-output name=lambda_url::${LAMBDA_URL}"
          echo "Deployed to: ${LAMBDA_URL}" 