generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[]
  posts     Post[]
  campaigns Campaign[]
  integrations Integration[]
  automations Automation[]
}

model Client {
  id        String   @id @default(uuid())
  name      String
  platform  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  comments  Comment[]
}

model Post {
  id        String   @id @default(uuid())
  content   String
  status    String   @default("scheduled") // scheduled, published, failed
  scheduledFor DateTime?
  publishedAt DateTime?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Integration {
  id        String   @id @default(uuid())
  name      String
  type      String   // onlyfans, fansly, etc.
  config    Json
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id        String   @id @default(uuid())
  name      String
  status    String   @default("active") // active, paused, completed
  metrics   Json?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Automation {
  id        String   @id @default(uuid())
  name      String
  workflow  Json
  status    String   @default("active") // active, paused
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 