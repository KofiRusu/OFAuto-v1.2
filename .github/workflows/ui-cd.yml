name: UI Continuous Deployment

on:
  push:
    branches: [ main, production ]
    paths:
      - 'UserInterfaceHub/**'
      - '.github/workflows/ui-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ofauto-ui
  TF_VAR_ui_container_image: ${{ github.repository_owner }}/ofauto-ui:${{ github.sha }}
  ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/production' && 'production') || 'staging' }}

jobs:
  build-and-push:
    name: Build and Push UI Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    outputs:
      image-tag: ${{ github.sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR
          cd UserInterfaceHub
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT
  
  terraform-plan:
    name: Terraform Plan for UI
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
      
      - name: Terraform Init
        working-directory: infra/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform init
      
      - name: Terraform Plan
        working-directory: infra/terraform/environments/${{ env.ENVIRONMENT }}
        id: plan
        run: |
          terraform plan \
            -var="ui_container_image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" \
            -var="clerk_secret_key=${{ secrets.CLERK_SECRET_KEY }}" \
            -var="clerk_publishable_key=${{ secrets.CLERK_PUBLISHABLE_KEY }}" \
            -var="encryption_key=${{ secrets.ENCRYPTION_KEY }}" \
            -var="acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }}" \
            -var="hosted_zone_id=${{ secrets.HOSTED_ZONE_ID }}" \
            -out=tfplan-ui
      
      - name: Upload Terraform plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-ui-${{ env.ENVIRONMENT }}
          path: infra/terraform/environments/${{ env.ENVIRONMENT }}/tfplan-ui
          retention-days: 1
  
  terraform-apply:
    name: Terraform Apply for UI
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      contents: read
      id-token: write
    
    # Only run on main/production branch or when manually triggered
    if: |
      github.ref == 'refs/heads/main' || 
      github.ref == 'refs/heads/production' || 
      github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ env.ENVIRONMENT }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
      
      - name: Download Terraform plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-ui-${{ env.ENVIRONMENT }}
          path: infra/terraform/environments/${{ env.ENVIRONMENT }}
      
      - name: Terraform Init
        working-directory: infra/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform init
      
      - name: Terraform Apply
        working-directory: infra/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform apply -auto-approve tfplan-ui
  
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: terraform-apply
    permissions:
      id-token: write
    
    # Only run on main/production branch or when manually triggered
    if: |
      github.ref == 'refs/heads/main' || 
      github.ref == 'refs/heads/production' || 
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get deployment FQDN
        working-directory: infra/terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          terraform init
          echo "FQDN=$(terraform output -raw fqdn)" >> $GITHUB_ENV
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready at https://${{ env.FQDN }}"
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" "https://${{ env.FQDN }}" | grep -q "200\|301\|302"; then
              echo "Deployment is ready!"
              exit 0
            fi
            echo "Attempt $i/30: Deployment not ready yet, waiting 10 seconds..."
            sleep 10
          done
          echo "Deployment did not become ready in time"
          exit 1
      
      - name: Run smoke tests
        run: |
          npm run test:smoke -- --url=https://${{ env.FQDN }}
      
      - name: Send notification on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ùå UI Deployment smoke tests failed: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 